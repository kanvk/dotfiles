# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# ~/.zshrc file for zsh interactive shells.
# see /usr/share/doc/zsh/examples/zshrc for examples

# ssh-agent pre-omz config
zstyle :omz:plugins:ssh-agent lazy yes
zstyle :omz:plugins:ssh-agent quiet yes

# prompt pre-omz config
# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# Homebrew completions
FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"

# asdf completions
fpath+="${ASDF_DIR}/completions"

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

# configure_prompt() {
#     prompt_symbol=ã‰¿
#     [ "$EUID" -eq 0 ] && prompt_symbol=ðŸ’€
#     case "$PROMPT_ALTERNATIVE" in
#         twoline)
#             PROMPT=$'%F{%(#.blue.green)}â”Œâ”€â”€${debian_chroot:+($debian_chroot)â”€}${VIRTUAL_ENV:+($(basename $VIRTUAL_ENV))â”€}(%B%F{%(#.red.blue)}%n$prompt_symbol%m%b%F{%(#.blue.green)})-[%B%F{reset}%(6~.%-1~/â€¦/%4~.%5~)%b%F{%(#.blue.green)}]\nâ””â”€%B%(#.%F{red}#.%F{blue}$)%b%F{reset} '
#             RPROMPT=$'%(?.. %? %F{red}%Bâ¨¯%b%F{reset})%(1j. %j %F{yellow}%Bâš™%b%F{reset}.)'
#             ;;
#         oneline)
#             PROMPT=$'${debian_chroot:+($debian_chroot)}${VIRTUAL_ENV:+($(basename $VIRTUAL_ENV))}%B%F{%(#.red.blue)}%n@%m%b%F{reset}:%B%F{%(#.blue.green)}%~%b%F{reset}%(#.#.$) '
#             RPROMPT=
#             ;;
#         backtrack)
#             PROMPT=$'${debian_chroot:+($debian_chroot)}${VIRTUAL_ENV:+($(basename $VIRTUAL_ENV))}%B%F{red}%n@%m%b%F{reset}:%B%F{blue}%~%b%F{reset}%(#.#.$) '
#             RPROMPT=
#             ;;
#     esac
# }

# The following block is surrounded by two delimiters.
# These delimiters must not be modified. Thanks.
PROMPT_ALTERNATIVE='twoline'
NEWLINE_BEFORE_PROMPT='no'

if [ "$color_prompt" = yes ]; then
    # override default virtualenv indicator in prompt
    VIRTUAL_ENV_DISABLE_PROMPT=1

    # configure_prompt

    # enable syntax-highlighting
    if [ -f /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ] && [ "$color_prompt" = yes ]; then
        . /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
        ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern cursor)
        typeset -gA ZSH_HIGHLIGHT_STYLES
        ZSH_HIGHLIGHT_STYLES[default]=none
        ZSH_HIGHLIGHT_STYLES[unknown-token]=fg=red,bold
        ZSH_HIGHLIGHT_STYLES[reserved-word]=fg=cyan,bold
        ZSH_HIGHLIGHT_STYLES[suffix-alias]=fg=green,underline
        ZSH_HIGHLIGHT_STYLES[global-alias]=fg=magenta
        ZSH_HIGHLIGHT_STYLES[precommand]=fg=green,underline
        ZSH_HIGHLIGHT_STYLES[commandseparator]=fg=blue,bold
        ZSH_HIGHLIGHT_STYLES[autodirectory]=fg=green,underline
        ZSH_HIGHLIGHT_STYLES[path]=underline
        ZSH_HIGHLIGHT_STYLES[path_pathseparator]=
        ZSH_HIGHLIGHT_STYLES[path_prefix_pathseparator]=
        ZSH_HIGHLIGHT_STYLES[globbing]=fg=blue,bold
        ZSH_HIGHLIGHT_STYLES[history-expansion]=fg=blue,bold
        ZSH_HIGHLIGHT_STYLES[command-substitution]=none
        ZSH_HIGHLIGHT_STYLES[command-substitution-delimiter]=fg=magenta
        ZSH_HIGHLIGHT_STYLES[process-substitution]=none
        ZSH_HIGHLIGHT_STYLES[process-substitution-delimiter]=fg=magenta
        ZSH_HIGHLIGHT_STYLES[single-hyphen-option]=fg=magenta
        ZSH_HIGHLIGHT_STYLES[double-hyphen-option]=fg=magenta
        ZSH_HIGHLIGHT_STYLES[back-quoted-argument]=none
        ZSH_HIGHLIGHT_STYLES[back-quoted-argument-delimiter]=fg=blue,bold
        ZSH_HIGHLIGHT_STYLES[single-quoted-argument]=fg=yellow
        ZSH_HIGHLIGHT_STYLES[double-quoted-argument]=fg=yellow
        ZSH_HIGHLIGHT_STYLES[dollar-quoted-argument]=fg=yellow
        ZSH_HIGHLIGHT_STYLES[rc-quote]=fg=magenta
        ZSH_HIGHLIGHT_STYLES[dollar-double-quoted-argument]=fg=magenta
        ZSH_HIGHLIGHT_STYLES[back-double-quoted-argument]=fg=magenta
        ZSH_HIGHLIGHT_STYLES[back-dollar-quoted-argument]=fg=magenta
        ZSH_HIGHLIGHT_STYLES[assign]=none
        ZSH_HIGHLIGHT_STYLES[redirection]=fg=blue,bold
        ZSH_HIGHLIGHT_STYLES[comment]=fg=black,bold
        ZSH_HIGHLIGHT_STYLES[named-fd]=none
        ZSH_HIGHLIGHT_STYLES[numeric-fd]=none
        ZSH_HIGHLIGHT_STYLES[arg0]=fg=green
        ZSH_HIGHLIGHT_STYLES[bracket-error]=fg=red,bold
        ZSH_HIGHLIGHT_STYLES[bracket-level-1]=fg=blue,bold
        ZSH_HIGHLIGHT_STYLES[bracket-level-2]=fg=green,bold
        ZSH_HIGHLIGHT_STYLES[bracket-level-3]=fg=magenta,bold
        ZSH_HIGHLIGHT_STYLES[bracket-level-4]=fg=yellow,bold
        ZSH_HIGHLIGHT_STYLES[bracket-level-5]=fg=cyan,bold
        ZSH_HIGHLIGHT_STYLES[cursor-matchingbracket]=standout
        ## General (Dracula)
        ### Diffs
        ### Markup
        ## Classes
        ## Comments
        ZSH_HIGHLIGHT_STYLES[comment]='fg=#6272A4'
        ## Constants
        ## Entitites
        ## Functions/methods
        ZSH_HIGHLIGHT_STYLES[alias]='fg=#50FA7B'
        ZSH_HIGHLIGHT_STYLES[suffix-alias]='fg=#50FA7B'
        ZSH_HIGHLIGHT_STYLES[global-alias]='fg=#50FA7B'
        ZSH_HIGHLIGHT_STYLES[function]='fg=#50FA7B'
        ZSH_HIGHLIGHT_STYLES[command]='fg=#50FA7B'
        ZSH_HIGHLIGHT_STYLES[precommand]='fg=#50FA7B,italic'
        ZSH_HIGHLIGHT_STYLES[autodirectory]='fg=#FFB86C,italic'
        ZSH_HIGHLIGHT_STYLES[single-hyphen-option]='fg=#FFB86C'
        ZSH_HIGHLIGHT_STYLES[double-hyphen-option]='fg=#FFB86C'
        ZSH_HIGHLIGHT_STYLES[back-quoted-argument]='fg=#BD93F9'
        ## Keywords
        ## Built ins
        ZSH_HIGHLIGHT_STYLES[builtin]='fg=#8BE9FD'
        ZSH_HIGHLIGHT_STYLES[reserved-word]='fg=#8BE9FD'
        ZSH_HIGHLIGHT_STYLES[hashed-command]='fg=#8BE9FD'
        ## Punctuation
        ZSH_HIGHLIGHT_STYLES[commandseparator]='fg=#FF79C6'
        ZSH_HIGHLIGHT_STYLES[command-substitution-delimiter]='fg=#F8F8F2'
        ZSH_HIGHLIGHT_STYLES[command-substitution-delimiter-unquoted]='fg=#F8F8F2'
        ZSH_HIGHLIGHT_STYLES[process-substitution-delimiter]='fg=#F8F8F2'
        ZSH_HIGHLIGHT_STYLES[back-quoted-argument-delimiter]='fg=#FF79C6'
        ZSH_HIGHLIGHT_STYLES[back-double-quoted-argument]='fg=#FF79C6'
        ZSH_HIGHLIGHT_STYLES[back-dollar-quoted-argument]='fg=#FF79C6'
        ## Serializable / Configuration Languages
        ## Storage
        ## Strings
        ZSH_HIGHLIGHT_STYLES[command-substitution-quoted]='fg=#F1FA8C'
        ZSH_HIGHLIGHT_STYLES[command-substitution-delimiter-quoted]='fg=#F1FA8C'
        ZSH_HIGHLIGHT_STYLES[single-quoted-argument]='fg=#F1FA8C'
        ZSH_HIGHLIGHT_STYLES[single-quoted-argument-unclosed]='fg=#FF5555'
        ZSH_HIGHLIGHT_STYLES[double-quoted-argument]='fg=#F1FA8C'
        ZSH_HIGHLIGHT_STYLES[double-quoted-argument-unclosed]='fg=#FF5555'
        ZSH_HIGHLIGHT_STYLES[rc-quote]='fg=#F1FA8C'
        ## Variables
        ZSH_HIGHLIGHT_STYLES[dollar-quoted-argument]='fg=#F8F8F2'
        ZSH_HIGHLIGHT_STYLES[dollar-quoted-argument-unclosed]='fg=#FF5555'
        ZSH_HIGHLIGHT_STYLES[dollar-double-quoted-argument]='fg=#F8F8F2'
        ZSH_HIGHLIGHT_STYLES[assign]='fg=#F8F8F2'
        ZSH_HIGHLIGHT_STYLES[named-fd]='fg=#F8F8F2'
        ZSH_HIGHLIGHT_STYLES[numeric-fd]='fg=#F8F8F2'
        ## No category relevant in spec
        ZSH_HIGHLIGHT_STYLES[unknown-token]='fg=#FF5555'
        ZSH_HIGHLIGHT_STYLES[path]='fg=#F8F8F2'
        ZSH_HIGHLIGHT_STYLES[path_pathseparator]='fg=#FF79C6'
        ZSH_HIGHLIGHT_STYLES[path_prefix]='fg=#F8F8F2'
        ZSH_HIGHLIGHT_STYLES[path_prefix_pathseparator]='fg=#FF79C6'
        ZSH_HIGHLIGHT_STYLES[globbing]='fg=#F8F8F2'
        ZSH_HIGHLIGHT_STYLES[history-expansion]='fg=#BD93F9'
        #ZSH_HIGHLIGHT_STYLES[command-substitution]='fg=?'
        #ZSH_HIGHLIGHT_STYLES[command-substitution-unquoted]='fg=?'
        #ZSH_HIGHLIGHT_STYLES[process-substitution]='fg=?'
        #ZSH_HIGHLIGHT_STYLES[arithmetic-expansion]='fg=?'
        ZSH_HIGHLIGHT_STYLES[back-quoted-argument-unclosed]='fg=#FF5555'
        ZSH_HIGHLIGHT_STYLES[redirection]='fg=#F8F8F2'
        ZSH_HIGHLIGHT_STYLES[arg0]='fg=#F8F8F2'
        ZSH_HIGHLIGHT_STYLES[default]='fg=#F8F8F2'
        ZSH_HIGHLIGHT_STYLES[cursor]='standout'
    fi
else
    PROMPT='${debian_chroot:+($debian_chroot)}%n@%m:%~%# '
fi
unset color_prompt force_color_prompt

# Oh My ZSH config
export ZSH="/home/kanvk/.oh-my-zsh"
plugins=(git git-lfs gh pip web-search docker docker-compose poetry copypath copyfile dirhistory
    history taskwarrior fzf vi-mode colorize colored-man-pages copybuffer z jsontools rust 
    ssh-agent)
source $ZSH/oh-my-zsh.sh

# Antigen config
source /usr/share/zsh-antigen/antigen.zsh
antigen init ~/.antigenrc

# zsh-autocomplete post-omz config
# Reset up, down, ^R, ^S
# () {
#    local -a prefix=( '\e'{\[,O} )
#    local -a up=( ${^prefix}A ) down=( ${^prefix}B )
#    local key=
#    for key in $up[@]; do
#       bindkey "$key" up-line-or-history
#    done
#    for key in $down[@]; do
#       bindkey "$key" down-line-or-history
#    done

#     zle -A {.,}history-incremental-search-backward
#     zle -A {.,}vi-history-search-backward
#     bindkey -M emacs '^S' history-incremental-search-forward
#     bindkey -M vicmd '/' vi-history-search-forward
# }

# Zfunc
fpath+=~/.zfunc

setopt autocd              # change directory just by typing its name
#setopt correct            # auto correct mistakes
setopt interactivecomments # allow comments in interactive mode
setopt magicequalsubst     # enable filename expansion for arguments of the form â€˜anything=expressionâ€™
setopt nonomatch           # hide error message if there is no match for the pattern
setopt notify              # report the status of background jobs immediately
setopt numericglobsort     # sort filenames numerically when it makes sense
setopt promptsubst         # enable command substitution in prompt

WORDCHARS=${WORDCHARS//\/} # Don't consider certain characters part of the word

# hide EOL sign ('%')
PROMPT_EOL_MARK=""

# configure key keybindings
bindkey -v                                        # Vi key bindings
bindkey ' ' magic-space                           # do history expansion on space
bindkey '^[[3;5~' kill-word                       # ctrl + Supr
bindkey '^[[3~' delete-char                       # delete
bindkey '^[[1;5C' forward-word                    # ctrl + ->
bindkey '^[[1;5D' backward-word                   # ctrl + <-
bindkey '^[[5~' beginning-of-buffer-or-history    # page up
bindkey '^[[6~' end-of-buffer-or-history          # page down
bindkey '^[[H' beginning-of-line                  # home
bindkey '^[[F' end-of-line                        # end
bindkey '^[[Z' undo                               # shift + tab undo last action

# enable completion features
autoload -Uz compinit
compinit -d ~/.cache/zcompdump
zstyle ':completion:*:*:*:*:*' menu select
zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*' rehash true
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

# History configurations
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=1000000
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_find_no_dups      # ignore duplicates when searching in line editor
setopt hist_ignore_dups       # ignore duplicated commands history list
setopt hist_ignore_space      # ignore commands that start with space
setopt hist_verify            # show command with history expansion to user before running it
setopt extended_history       # extended history timestamps
setopt inc_append_history     # Immediately append commands to history
setopt share_history          # share command history data

# configure `time` format
TIMEFMT=$'\nreal\t%E\nuser\t%U\nsys\t%S\ncpu\t%P'

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# toggle_oneline_prompt(){
#     if [ "$PROMPT_ALTERNATIVE" = oneline ]; then
#         PROMPT_ALTERNATIVE=twoline
#     else
#         PROMPT_ALTERNATIVE=oneline
#     fi
#     configure_prompt
#     zle reset-prompt
# }
# zle -N toggle_oneline_prompt
# bindkey ^P toggle_oneline_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*|Eterm|aterm|kterm|gnome*|alacritty)
    TERM_TITLE=$'\e]0;${debian_chroot:+($debian_chroot)}${VIRTUAL_ENV:+($(basename $VIRTUAL_ENV))}%n@%m: %~\a'
    ;;
*)
    ;;
esac

# precmd() {
#     # Print the previously configured title
#     print -Pnr -- "$TERM_TITLE"

#     # Print a new line before the prompt, but only if it is not the first line
#     if [ "$NEWLINE_BEFORE_PROMPT" = yes ]; then
#         if [ -z "$_NEW_LINE_BEFORE_PROMPT" ]; then
#             _NEW_LINE_BEFORE_PROMPT=1
#         else
#             print ""
#         fi
#     fi
# }

# enable color support of ls, less and man
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"

    # Take advantage of $LS_COLORS for completion as well
    zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
    zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
fi

# enable auto-suggestions based on the history
if [ -f /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh ]; then
    . /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh
    # change suggestion color
    ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=#999'
fi

# enable command-not-found if installed
#if [ -f /etc/zsh_command_not_found ]; then
#    . /etc/zsh_command_not_found
#fi

# Delayed aliases
alias ls='lsd'
alias l='lsd -F'
alias ll='lsd -lh'
alias la='lsd -lAh'

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/kanvk/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/kanvk/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/home/kanvk/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/kanvk/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
